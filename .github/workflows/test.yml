name: Test
on:
  push:
    branches:
      - test

jobs:
  release:
    runs-on: macos-latest
    environment: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create configuration file
        run: cp Productivity/Configurations/Plist/ConfigTemplate.plist Productivity/Configurations/Plist/ConfigTest.plist

      - name: Fill in configuration file
        env:
          OPEN_AI_API_KEY: ${{ secrets.OPEN_AI_API_KEY }}
          MIXPANEL_PROJECT_TOKEN: ${{ secrets.MIXPANEL_PROJECT_TOKEN }}
          SENTRY_DNS: ${{ secrets.SENTRY_DNS }}
          SENTRY_ENVIRONMENT: ${{ vars.SENTRY_ENVIRONMENT }}
        run: |
          /usr/libexec/PlistBuddy -c "Set :OpenAIAPIKey '${OPEN_AI_API_KEY}'" Productivity/Configurations/Plist/ConfigTest.plist
          /usr/libexec/PlistBuddy -c "Set :MixpanelProjectToken '${MIXPANEL_PROJECT_TOKEN}'" Productivity/Configurations/Plist/ConfigTest.plist
          /usr/libexec/PlistBuddy -c "Set :SentryDNS '${SENTRY_DNS}'" Productivity/Configurations/Plist/ConfigTest.plist
          /usr/libexec/PlistBuddy -c "Set :SentryEnvironment '${SENTRY_ENVIRONMENT}'" Productivity/Configurations/Plist/ConfigTest.plist

      - name: Run unit tests with code coverage
        run: |
          xcodebuild test \
            -project Productivity.xcodeproj \
            -scheme ProductivityTest \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,OS=latest,name=iPhone 14' \
            -resultBundlePath $RUNNER_TEMP/Reports/result \
            -enableCodeCoverage YES \
            -quiet

      - name: Install xcresult parser
        run: |
          brew tap a7ex/homebrew-formulae
          brew install xcresultparser

      - name: Parse xcresult for Codecov
        run: |
          xcresultparser \
            --output-format cobertura \
            $RUNNER_TEMP/Reports/result.xcresult > $RUNNER_TEMP/Reports/codecov-coverage.xml

      - name: Make xccov-to-sonarqube-generic.sh executable
        run: chmod +x ./xccov-to-sonarqube-generic.sh

      - name: Parse xcresult for Sonar
        run: ./xccov-to-sonarqube-generic.sh $RUNNER_TEMP/Reports/result.xcresult > $RUNNER_TEMP/Reports/sonarqube-generic-coverage.xml

      - name: List coverage report files
        run: ls -la $RUNNER_TEMP/Reports

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: $RUNNER_TEMP/Reports/codecov-coverage.xml
          fail_ci_if_error: true

      - name: Install Sonar Scanner
        run: brew install sonar-scanner

      - name: Upload coverage report to Sonar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION_KEY: ${{ secrets.SONAR_ORGANIZATION_KEY }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.organization=$SONAR_ORGANIZATION_KEY \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.coverageReportPaths=$RUNNER_TEMP/Reports/sonarqube-generic-coverage.xml \
            -Dsonar.c.file.suffixes=- \
            -Dsonar.cpp.file.suffixes=- \
            -Dsonar.objc.file.suffixes=- \
            -Dsonar.inclusions=Productivity/Sources/**/*

      - name: Install Apple certificate and provisioning profile
        env:
          APPLE_DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE_BASE64 }}
          APPLE_DISTRIBUTION_CERTIFICATE_P12_PW: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE_P12_PW }}
          APPLE_PROVISIONING_PROFILE_BASE64: ${{ secrets.APPLE_PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$APPLE_DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$APPLE_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$APPLE_DISTRIBUTION_CERTIFICATE_P12_PW" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Increment build version
        env:
          APP_STORE_CONNECT_BASE_BUILD_NUMBER: ${{ secrets.APP_STORE_CONNECT_BASE_BUILD_NUMBER }}
        run: |
          BASE_BUILD_NUMBER=$(($APP_STORE_CONNECT_BASE_BUILD_NUMBER))
          FINAL_BUILD_NUMBER=$((BASE_BUILD_NUMBER + ${{ github.run_number }}))
          agvtool new-version -all $FINAL_BUILD_NUMBER
          echo "New build number set to: $FINAL_BUILD_NUMBER"

      - name: Build and archive app
        run: |
          xcodebuild archive \
            -scheme ProductivityTest \
            -sdk iphoneos \
            -configuration Release \
            -archivePath $PWD/Build/ProductivityTest.xcarchive \
            -quiet

      - name: Export archive to an IPA
        run: |
          xcodebuild \
            -exportArchive \
            -archivePath $PWD/Build/ProductivityTest.xcarchive \
            -exportOptionsPlist $PWD/Productivity/Configurations/Plist/ExportOptionsTest.plist \
            -exportPath $PWD/Build \
            -allowProvisioningUpdates \
            -quiet

      - name: Install Sentry CLI
        run: brew install getsentry/tools/sentry-cli

      - name: Upload debug symbols to Sentry
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORGANIZATION_KEY: ${{ secrets.SENTRY_ORGANIZATION_KEY }}
          SENTRY_PROJECT_KEY: ${{ secrets.SENTRY_PROJECT_KEY }}
        run: |
          sentry-cli debug-files upload \
            --auth-token $SENTRY_AUTH_TOKEN \
            --include-sources \
            --org $SENTRY_ORGANIZATION_KEY \
            --project $SENTRY_PROJECT_KEY \
            $PWD/Build/ProductivityTest.xcarchive/dSYMs

      - name: Decode App Connect Store API Key
        env:
          APP_STORE_CONNECT_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        run: |
          mkdir -p ~/private_keys
          echo "$APP_STORE_CONNECT_API_KEY_BASE64" | base64 --decode > ~/private_keys/AuthKey_${APP_STORE_CONNECT_API_KEY_ID}.p8

      - name: Validate app
        env:
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        run: |
          xcrun altool --validate-app --type ios --file $PWD/Build/ProductivityTest.ipa --apiKey $APP_STORE_CONNECT_API_KEY_ID --apiIssuer $APP_STORE_CONNECT_API_ISSUER_ID --verbose

      - name: Upload app
        env:
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        run: |
          xcrun altool --upload-app --type ios --file $PWD/Build/ProductivityTest.ipa --apiKey $APP_STORE_CONNECT_API_KEY_ID --apiIssuer $APP_STORE_CONNECT_API_ISSUER_ID --verbose
